/*
 * Un numero positivo n e' primo se e' maggiore di 1 e se e' divisibile
 * solo per 1 e per se stesso. Un numero primo e' circolare se ogni sua 
 * permutazione circolare e' anche un numero primo. Ad esempio, 113 e' 
 * un numero primo circolare in quanto anche 131 e 311 sono numeri primi. 
 * Al contrario, 29 non e' circolare in quanto 92 non e' primo. Osserviamo 
 * che un numero primo che contiene lo 0 tra le sue cifre non puo' essere un 
 * numero primo circolare: ad esempio, il numero primo 101 ha la permutazione
 * circolare 110 che, chiaramente, non Ã¨ un numero primo. Scrivere un metodo,
 * chiamato circularPrime, che dato in input un numero intero n positivo, 
 * restituisca il numero di numeri primi circolari minori o uguali a n. 
 * Per definire il metodo si suggerisce di fare uso del metodo del crivello 
 * di Eratostene, cosi' definito. Si considerano tutti i numeri interi a 
 * partire da 2 fino a n. Poi si "cancellano" tutti i multipli di 2 
 * (escluso 2 stesso). Si prende poi il primo numero non cancellato maggiore
 * di 2 e si ripete l'operazione con i suoi multipli (escluso lui stesso),
 * proseguendo in questo modo fino a che non si applica l'operazione 
 * all'ultimo numero non cancellato. I numeri che non sono stati cancellati 
 * sono i numeri primi minori o uguali a n.
 * 
 * ESEMPI
 * Input: 100
 * Output: 13 
 * 
 * Input: 200
 * Output: 17 
 * 
 * Input: 300
 * Output: 17 
 * 
 * Input: 400
 * Output: 20 
 */
int circularPrime(int n) {
	int[] v = createVectorNumber(n);
	deleteMultiples(v);
	deleteNoCircularPrime(v);
	int i = 1;
	int cont = 0;
	while (v[i] <= n) {
		if (v[i] != 0) {
			System.out.println(v[i]);
			cont = cont + 1;

		}
		i = i + 1;
	}
	System.out.println();

	return cont - 1;
}

int[] createVectorNumber(int n) {
	int digit = contDigitNumber(n);
	int[] vectorN = new int[powOfTen(digit)];
	for (int i = 0; i < vectorN.length; i++) {
		vectorN[i] = i;
	}
	return vectorN;
}

void deleteNoCircularPrime(int[] v) {
	boolean zeroFive = false;
	boolean even = false;
	for (int i = 0; i < v.length; i++) {
		zeroFive = deleteZeroFiveDigit(v[i]);
		even = deleteEvenDigit(v[i]);
		if (zeroFive == true || even == true) {
			v[i] = 0;
		}
	}
}

int contDigitNumber(int number) {
	int digit = 0;
	while (number != 0) {
		digit = digit + 1;
		number = number / 10;
	}
	return digit;
}

int powOfTen(int n) {
	int pow = 1;
	for (int i = 0; i < n; i++) {
		pow = pow * 10;
	}
	return pow;
}

boolean deleteEvenDigit(int n) {
	if (n == 2)
		return false;
	int resto = 0;
	while (n != 0) {
		resto = n % 10;
		n = n / 10;
		if (resto % 2 == 0)
			return true;
	}
	return false;
}

boolean deleteZeroFiveDigit(int n) {
	if (n == 5)
		return false;
	int resto = 0;
	while (n != 0) {
		resto = n % 10;
		n = n / 10;
		if (resto == 0 || resto == 5)
			return true;
	}
	return false;
}

void deleteMultiples(int[] v) {
	int ris = 0;
	int perm = 0;
	for(int i = 2; i < v.length; i++){
		if(v[i] != 0){
			int k = 2;
			while(v[i] * k < v.length - 1){
				ris =  v[i] * k;
				perm = ris;
				if(ris < v.length -1){
					v[ris] = 0;
					int cont = 0;
					do{
						perm = permutation(perm);
						if(perm > v[i){
							v[perm] = 0;
						}
						cont = cont + 1;
					}while(cont < contDigitNumber(ris));
				}
				k = k + 1;
			}
		}
	}
}

int permutation(int n) {
	int digits = contDigitNumber(n) - 1;
	int p = (n % powOfTen(digits)) * 10 + n / powOfTen(digits);

	return p;
}

int factorial(int n) {
	int ris = 1;
	for (int i = 1; i <= n; i++) {
		ris = ris * i;
	}
	return ris;
}

void printArray(int[] v) {
	for (int i = 0; i < v.length; i++) {
		System.out.println(v[i] + " ");
	}
}

int[] v = createVectorNumber(300);
deleteNoCircularPrime(v);
deleteMultiples(v);
printArray(v);

//System.out.println(circularPrime(100));


