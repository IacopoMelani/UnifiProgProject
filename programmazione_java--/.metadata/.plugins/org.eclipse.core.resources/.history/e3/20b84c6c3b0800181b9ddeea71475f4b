int[][] palindromePair(int[] a) {
	int[][] matrix = new int[10000][2];
	int h = findCouple(a, matrix);
	if (h > 0) {
		int[][] m = reSizeMatrix(matrix, h);
		sortMatrix(m);
		return m;
	} else {
		return {};
	}

}

//se x < w oppure x = w e y < z
void sortMatrix(int[][] m){
	int h = m.length;
}

void swap(int[][] m, int r1, int r2) {
	int tempxw = 0;
	int tempyz = 0;

	tempxw = m[r1][0];
	tempyz = m[r1][1];

	m[r1][0] = m[r2][0];
	m[r1][1] = m[r2][1];

	m[r2][0] = tempxw;
	m[r2][1] = tempyz;

}

int[][] reSizeMatrix(int[][] m, int k) {
	int[][] matrix = new int[k][2];
	for (int i = 0; i < matrix.length; i++) {
		matrix[i] = m[i];
	}
	return matrix;
}

int contDigit(int n) {
	int cont = 0;
	while (n != 0) {
		n = n / 10;
		cont = cont + 1;
	}
	return cont;
}

int findCouple(int[] a, int[][] matrix) {
	int n, m;
	int riga = 0, h = 0;
	boolean c = false;
	for (n = 0; n < a.length; n++) {
		for (m = 0; m < a.length; m++) {
			c = checkCouple(a[n], a[m]);
			if (c == true) {
				if (n > m) {
					matrix[riga][0] = m;
					matrix[riga][1] = n;
				} else {
					matrix[riga][0] = n;
					matrix[riga][1] = m;
				}
				riga = riga + 1;
				h = h + 1;
			}
		}
	}
	return h;
}

boolean checkCouple(int n, int m) {
	boolean c = true;
	int digitM = contDigit(m);
	n = n * powOfX(digitM, 10);
	n = n + m;
	int[] a = putNInArray(n);
	int[] b = reverseArray(a);
	c = palindrome(b);
	return c;
}

int powOfX(int n, int x) {
	int ris = x;
	for (int i = 1; i < n; i++) {
		ris = ris * x;
	}
	return ris;
}

int[] putNInArray(int n) {
	int[] a = new int[contDigit(n)];
	int i = 0;
	int r = 0;
	while (n != 0) {
		r = n % 10;
		a[i] = r;
		i = i + 1;
		n = n / 10;
	}
	return a;
}

int[] reverseArray(int[] a) {
	int[] b = new int[a.length];
	int j = a.length - 1;
	for (int i = 0; i < b.length; i++) {
		b[i] = a[j];
		j = j - 1;
	}
	return b;
}

boolean palindrome(int[] a) {
	int len = a.length;
	int top = len - 1;
	for (int down = 0; down < len; down++) {
		if (a[down] != a[top])
			return false;
		top--;
	}
	return true;
}

int[] a = {111, 33211, 1943449, 1};
int[][] c = palindromePair(a);
System.out.println();

