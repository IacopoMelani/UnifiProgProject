package javamm;

@SuppressWarnings("all")
public class CircularPrime {
  /**
   * Un numero positivo n e' primo se e' maggiore di 1 e se e' divisibile
   * solo per 1 e per se stesso. Un numero primo e' circolare se ogni sua
   * permutazione circolare e' anche un numero primo. Ad esempio, 113 e'
   * un numero primo circolare in quanto anche 131 e 311 sono numeri primi.
   * Al contrario, 29 non e' circolare in quanto 92 non e' primo. Osserviamo
   * che un numero primo che contiene lo 0 tra le sue cifre non puo' essere un
   * numero primo circolare: ad esempio, il numero primo 101 ha la permutazione
   * circolare 110 che, chiaramente, non Ã¨ un numero primo. Scrivere un metodo,
   * chiamato circularPrime, che dato in input un numero intero n positivo,
   * restituisca il numero di numeri primi circolari minori o uguali a n.
   * Per definire il metodo si suggerisce di fare uso del metodo del crivello
   * di Eratostene, cosi' definito. Si considerano tutti i numeri interi a
   * partire da 2 fino a n. Poi si "cancellano" tutti i multipli di 2
   * (escluso 2 stesso). Si prende poi il primo numero non cancellato maggiore
   * di 2 e si ripete l'operazione con i suoi multipli (escluso lui stesso),
   * proseguendo in questo modo fino a che non si applica l'operazione
   * all'ultimo numero non cancellato. I numeri che non sono stati cancellati
   * sono i numeri primi minori o uguali a n.
   * 
   * ESEMPI
   * Input: 100
   * Output: 13
   * 
   * Input: 200
   * Output: 17
   * 
   * Input: 300
   * Output: 17
   * 
   * Input: 400
   * Output: 20
   */
  public static int circularPrime(int n) {
    return 0;
  }
  
  public static int[] createVectorNumber(int n) {
    int digit = CircularPrime.contDigitNumber(n);
    int[] vectorN = new int[(CircularPrime.powOfTen(digit) - 1)];
    for (int i = 0; (i < vectorN.length); i++) {
      vectorN[i] = i;
    }
    return vectorN;
  }
  
  public static int contDigitNumber(int number) {
    int digit = 0;
    while ((number != 0)) {
      {
        digit = (digit + 1);
        number = (number / 10);
      }
    }
    return digit;
  }
  
  public static int powOfTen(int n) {
    int pow = 1;
    for (int i = 0; (i < n); i++) {
      pow = (pow * 10);
    }
    return pow;
  }
  
  public static boolean deleteEvenDigit(int n) {
    int resto = 0;
    while ((n != 0)) {
      {
        resto = (n % 10);
        n = (n / 10);
        if (((resto % 2) == 0)) {
          return true;
        }
      }
    }
    return false;
  }
  
  public static void main(String[] args) {
  }
}
